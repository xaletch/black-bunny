import { z } from 'zod';
export declare const configSchema: z.ZodObject<z.objectUtil.extendShape<{
    virtualRouteConfig: z.ZodOptional<z.ZodType<import('@tanstack/virtual-file-routes').VirtualRootRoute, z.ZodTypeDef, import('@tanstack/virtual-file-routes').VirtualRootRoute>>;
    routeFilePrefix: z.ZodOptional<z.ZodString>;
    routeFileIgnorePrefix: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    routeFileIgnorePattern: z.ZodOptional<z.ZodString>;
    routesDirectory: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    generatedRouteTree: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    quoteStyle: z.ZodDefault<z.ZodOptional<z.ZodEnum<["single", "double"]>>>;
    semicolons: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    disableTypes: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    addExtensions: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    disableLogging: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    disableManifestGeneration: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    apiBase: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    routeTreeFileHeader: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
    routeTreeFileFooter: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
    autoCodeSplitting: z.ZodOptional<z.ZodBoolean>;
    indexToken: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    routeToken: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    experimental: z.ZodOptional<z.ZodObject<{
        enableCodeSplitting: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        enableCodeSplitting?: boolean | undefined;
    }, {
        enableCodeSplitting?: boolean | undefined;
    }>>;
}, {
    enableRouteGeneration: z.ZodOptional<z.ZodBoolean>;
}>, "strip", z.ZodTypeAny, {
    routeFileIgnorePrefix: string;
    routesDirectory: string;
    generatedRouteTree: string;
    quoteStyle: "single" | "double";
    semicolons: boolean;
    disableTypes: boolean;
    addExtensions: boolean;
    disableLogging: boolean;
    disableManifestGeneration: boolean;
    apiBase: string;
    routeTreeFileHeader: string[];
    routeTreeFileFooter: string[];
    indexToken: string;
    routeToken: string;
    enableRouteGeneration?: boolean | undefined;
    virtualRouteConfig?: import('@tanstack/virtual-file-routes').VirtualRootRoute | undefined;
    routeFilePrefix?: string | undefined;
    routeFileIgnorePattern?: string | undefined;
    autoCodeSplitting?: boolean | undefined;
    experimental?: {
        enableCodeSplitting?: boolean | undefined;
    } | undefined;
}, {
    enableRouteGeneration?: boolean | undefined;
    virtualRouteConfig?: import('@tanstack/virtual-file-routes').VirtualRootRoute | undefined;
    routeFilePrefix?: string | undefined;
    routeFileIgnorePrefix?: string | undefined;
    routeFileIgnorePattern?: string | undefined;
    routesDirectory?: string | undefined;
    generatedRouteTree?: string | undefined;
    quoteStyle?: "single" | "double" | undefined;
    semicolons?: boolean | undefined;
    disableTypes?: boolean | undefined;
    addExtensions?: boolean | undefined;
    disableLogging?: boolean | undefined;
    disableManifestGeneration?: boolean | undefined;
    apiBase?: string | undefined;
    routeTreeFileHeader?: string[] | undefined;
    routeTreeFileFooter?: string[] | undefined;
    autoCodeSplitting?: boolean | undefined;
    indexToken?: string | undefined;
    routeToken?: string | undefined;
    experimental?: {
        enableCodeSplitting?: boolean | undefined;
    } | undefined;
}>;
export declare const getConfig: (inlineConfig: Partial<Config>, root: string) => {
    routeFileIgnorePrefix: string;
    routesDirectory: string;
    generatedRouteTree: string;
    quoteStyle: "single" | "double";
    semicolons: boolean;
    disableTypes: boolean;
    addExtensions: boolean;
    disableLogging: boolean;
    disableManifestGeneration: boolean;
    apiBase: string;
    routeTreeFileHeader: string[];
    routeTreeFileFooter: string[];
    indexToken: string;
    routeToken: string;
    enableRouteGeneration?: boolean | undefined;
    virtualRouteConfig?: import('@tanstack/virtual-file-routes').VirtualRootRoute | undefined;
    routeFilePrefix?: string | undefined;
    routeFileIgnorePattern?: string | undefined;
    autoCodeSplitting?: boolean | undefined;
    experimental?: {
        enableCodeSplitting?: boolean | undefined;
    } | undefined;
};
export type Config = z.infer<typeof configSchema>;
