export { createHistory, createBrowserHistory, createHashHistory, createMemoryHistory, } from '@tanstack/history';
export type { BlockerFn, HistoryLocation, RouterHistory, ParsedPath, HistoryState, } from '@tanstack/history';
export { default as invariant } from 'tiny-invariant';
export { default as warning } from 'tiny-warning';
export { useAwaited, Await } from './awaited.js';
export type { AwaitOptions } from './awaited.js';
export { ScriptOnce } from './ScriptOnce.js';
export { defer } from './defer.js';
export type { DeferredPromiseState, DeferredPromise } from './defer.js';
export { CatchBoundary, ErrorComponent } from './CatchBoundary.js';
export { FileRoute, createFileRoute, FileRouteLoader, LazyRoute, createLazyRoute, createLazyFileRoute, } from './fileRoute.js';
export type { FileRoutesByPath, FileRouteTypes, LazyRouteOptions, } from './fileRoute.js';
export * from './history.js';
export { lazyRouteComponent } from './lazyRouteComponent.js';
export { useLinkProps, createLink, Link } from './link.js';
export type { CleanPath, Split, ParsePathParams, Join, Last, RemoveTrailingSlashes, RemoveLeadingSlashes, SearchPaths, SearchRelativePathAutoComplete, RelativeToParentPathAutoComplete, RelativeToCurrentPathAutoComplete, AbsolutePathAutoComplete, RelativeToPathAutoComplete, NavigateOptions, ToOptions, ToMaskOptions, ToSubOptions, ResolveRoute, SearchParamOptions, PathParamOptions, ToPathOption, ActiveOptions, LinkOptions, CheckPath, ResolveRelativePath, UseLinkPropsOptions, ActiveLinkOptions, LinkProps, LinkComponent, CreateLinkProps, MakeOptionalPathParams, } from './link.js';
export type { ParsedLocation } from './location.js';
export { Matches, useMatchRoute, MatchRoute, useMatches, useParentMatches, useChildMatches, isMatch, } from './Matches.js';
export type { RouteMatch, AnyRouteMatch, MatchRouteOptions, UseMatchRouteOptions, MakeMatchRouteOptions, MakeRouteMatch, MakeRouteMatchUnion, } from './Matches.js';
export { matchContext } from './matchContext.js';
export { Match, Outlet } from './Match.js';
export { isServerSideError, defaultDeserializeError } from './isServerSideError.js';
export { useMatch } from './useMatch.js';
export { useLoaderDeps } from './useLoaderDeps.js';
export { useLoaderData } from './useLoaderData.js';
export { joinPaths, cleanPath, trimPathLeft, trimPathRight, trimPath, resolvePath, parsePathname, interpolatePath, matchPathname, removeBasepath, matchByPath, } from './path.js';
export type { Segment } from './path.js';
export { encode, decode } from './qss.js';
export { redirect, isRedirect } from './redirects.js';
export type { AnyRedirect, Redirect, ResolvedRedirect } from './redirects.js';
export { rootRouteId } from './root.js';
export type { RootRouteId } from './root.js';
export { RouteApi, getRouteApi, Route, createRoute, RootRoute, rootRouteWithContext, createRootRoute, createRootRouteWithContext, createRouteMask, NotFoundRoute, } from './route.js';
export type { AnyPathParams, ResolveParams, SearchSchemaInput, SearchValidatorAdapter, AnySearchSchema, AnyContext, RouteContext, PreloadableObj, RoutePathOptions, StaticDataRouteOption, RoutePathOptionsIntersection, RouteOptions, FileBaseRouteOptions, BaseRouteOptions, UpdatableRouteOptions, UpdatableStaticRouteOption, MetaDescriptor, RouteLinkEntry, ParseParamsFn, RouteLoaderFn, LoaderFnContext, SearchFilter, ResolveId, InferFullSearchSchema, InferFullSearchSchemaInput, ResolveFullSearchSchema, ResolveFullSearchSchemaInput, AnyRoute, RouteConstraints, AnyRootRoute, ResolveFullPath, RouteMask, ErrorRouteProps, ErrorComponentProps, NotFoundRouteProps, ReactNode, SyncRouteComponent, AsyncRouteComponent, RouteComponent, ErrorRouteComponent, NotFoundRouteComponent, TrimPath, TrimPathLeft, TrimPathRight, RootRouteOptions, AnyRouteWithContext, ParseSplatParams, SplatParams, StringifyParamsFn, ParamsOptions, FullSearchSchemaOption, RouteContextFn, RouteContextOptions, BeforeLoadFn, BeforeLoadContextOptions, AnySearchValidator, DefaultSearchValidator, ContextOptions, SearchValidatorObj, AnySearchValidatorObj, AnySearchValidatorAdapter, AnySearchValidatorFn, SearchValidatorFn, SearchValidator, InferAllParams, InferAllContext, ResolveSearchSchemaFnInput, ResolveSearchSchemaInput, ResolveSearchSchema, LooseReturnType, LooseAsyncReturnType, ContextReturnType, ContextAsyncReturnType, RouteContextParameter, BeforeLoadContextParameter, ResolveAllContext, ResolveLoaderData, ResolveAllParamsFromParent, ResolveRouteContext, ResolveSearchSchemaFn, } from './route.js';
export type { ParseRoute, RoutesById, RouteById, RouteIds, RoutesByPath, RouteByPath, RoutePaths, FullSearchSchema, AllParams, AllLoaderData, FullSearchSchemaInput, AllContext, } from './routeInfo.js';
export { componentTypes, createRouter, Router, lazyFn, SearchParamError, PathParamError, getInitialRouterState, defaultSerializeError, } from './router.js';
export type { Register, AnyRouter, RegisteredRouter, HydrationCtx, RouterContextOptions, TrailingSlashOption, RouterOptions, RouterErrorSerializer, RouterState, ListenerFn, BuildNextOptions, DehydratedRouterState, DehydratedRouteMatch, DehydratedRouter, RouterConstructorOptions, RouterEvents, RouterEvent, RouterListener, AnyRouterWithContext, ExtractedEntry, StreamState, } from './router.js';
export { RouterProvider, RouterContextProvider } from './RouterProvider.js';
export type { RouterProps, CommitLocationOptions, MatchLocation, NavigateFn, BuildLocationFn, InjectedHtmlEntry, } from './RouterProvider.js';
export { useScrollRestoration, useElementScrollRestoration, ScrollRestoration, } from './scroll-restoration.js';
export type { ScrollRestorationOptions } from './scroll-restoration.js';
export { defaultParseSearch, defaultStringifySearch, parseSearchWith, stringifySearchWith, } from './searchParams.js';
export type { SearchSerializer, SearchParser } from './searchParams.js';
export { defaultTransformer } from './transformer.js';
export type { RouterTransformer } from './transformer.js';
export { useBlocker, Block } from './useBlocker.js';
export { useNavigate, Navigate } from './useNavigate.js';
export type { UseNavigateResult } from './useNavigate.js';
export { useParams } from './useParams.js';
export { useSearch } from './useSearch.js';
export { getRouterContext, } from './routerContext.js';
export { useRouteContext } from './useRouteContext.js';
export { useRouter } from './useRouter.js';
export { useRouterState } from './useRouterState.js';
export { useLocation } from './useLocation.js';
export { escapeJSON, // SSR
useLayoutEffect, // SSR
pick, functionalUpdate, replaceEqualDeep, isPlainObject, isPlainArray, deepEqual, useStableCallback, shallow, } from './utils.js';
export { notFound, isNotFound, CatchNotFound, DefaultGlobalNotFound, } from './not-found.js';
export type { NotFoundError } from './not-found.js';
export type { Manifest, RouterManagedTag } from './manifest.js';
export { createControlledPromise } from './utils.js';
export type { ControlledPromise } from './utils.js';
