{"version":3,"file":"config.cjs","sources":["../../src/config.ts"],"sourcesContent":["import path from 'node:path'\nimport { existsSync, readFileSync } from 'node:fs'\nimport { z } from 'zod'\nimport { virtualRootRouteSchema } from './filesystem/virtual/config'\n\nexport const configSchema = z.object({\n  virtualRouteConfig: virtualRootRouteSchema.optional(),\n  routeFilePrefix: z.string().optional(),\n  routeFileIgnorePrefix: z.string().optional().default('-'),\n  routeFileIgnorePattern: z.string().optional(),\n  routesDirectory: z.string().optional().default('./src/routes'),\n  generatedRouteTree: z.string().optional().default('./src/routeTree.gen.ts'),\n  quoteStyle: z.enum(['single', 'double']).optional().default('single'),\n  semicolons: z.boolean().optional().default(false),\n  disableTypes: z.boolean().optional().default(false),\n  addExtensions: z.boolean().optional().default(false),\n  disableLogging: z.boolean().optional().default(false),\n  disableManifestGeneration: z.boolean().optional().default(false),\n  apiBase: z.string().optional().default('/api'),\n  routeTreeFileHeader: z\n    .array(z.string())\n    .optional()\n    .default([\n      '/* prettier-ignore-start */',\n      '/* eslint-disable */',\n      '// @ts-nocheck',\n      '// noinspection JSUnusedGlobalSymbols',\n    ]),\n  routeTreeFileFooter: z\n    .array(z.string())\n    .optional()\n    .default(['/* prettier-ignore-end */']),\n  autoCodeSplitting: z.boolean().optional(),\n  indexToken: z.string().optional().default('index'),\n  routeToken: z.string().optional().default('route'),\n  experimental: z\n    .object({\n      // TODO: Remove this option in the next major release (v2).\n      enableCodeSplitting: z.boolean().optional(),\n    })\n    .optional(),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport function getConfig(\n  inlineConfig: Partial<Config> = {},\n  configDirectory?: string,\n): Config {\n  if (configDirectory === undefined) {\n    configDirectory = process.cwd()\n  }\n  const configFilePathJson = path.resolve(configDirectory, 'tsr.config.json')\n  const exists = existsSync(configFilePathJson)\n\n  let config: Config\n\n  if (exists) {\n    config = configSchema.parse({\n      ...JSON.parse(readFileSync(configFilePathJson, 'utf-8')),\n      ...inlineConfig,\n    })\n  } else {\n    config = configSchema.parse(inlineConfig)\n  }\n\n  // If typescript is disabled, make sure the generated route tree is a .js file\n  if (config.disableTypes) {\n    config.generatedRouteTree = config.generatedRouteTree.replace(\n      /\\.(ts|tsx)$/,\n      '.js',\n    )\n  }\n\n  // if a configDirectory is used, paths should be relative to that directory\n  if (configDirectory) {\n    // if absolute configDirectory is provided, use it as the root\n    if (path.isAbsolute(configDirectory)) {\n      config.routesDirectory = path.resolve(\n        configDirectory,\n        config.routesDirectory,\n      )\n      config.generatedRouteTree = path.resolve(\n        configDirectory,\n        config.generatedRouteTree,\n      )\n    } else {\n      config.routesDirectory = path.resolve(\n        process.cwd(),\n        configDirectory,\n        config.routesDirectory,\n      )\n      config.generatedRouteTree = path.resolve(\n        process.cwd(),\n        configDirectory,\n        config.generatedRouteTree,\n      )\n    }\n  }\n\n  validateConfig(config)\n  return config\n}\n\nfunction validateConfig(config: Config) {\n  if (typeof config.experimental?.enableCodeSplitting !== 'undefined') {\n    const message = `\n------\n⚠️ ⚠️ ⚠️\nERROR: The \"experimental.enableCodeSplitting\" flag has been made stable and is now \"autoCodeSplitting\". Please update your configuration file to use \"autoCodeSplitting\" instead of \"experimental.enableCodeSplitting\".\n------\n`\n    console.error(message)\n    throw new Error(message)\n  }\n\n  if (config.indexToken === config.routeToken) {\n    throw new Error(\n      `The \"indexToken\" and \"routeToken\" options must be different.`,\n    )\n  }\n\n  if (\n    config.routeFileIgnorePrefix &&\n    config.routeFileIgnorePrefix.trim() === '_'\n  ) {\n    throw new Error(\n      `The \"routeFileIgnorePrefix\" cannot be an underscore (\"_\"). This is a reserved character used to denote a pathless route. Please use a different prefix.`,\n    )\n  }\n\n  return config\n}\n"],"names":["z","virtualRootRouteSchema","existsSync","config","readFileSync"],"mappings":"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"}