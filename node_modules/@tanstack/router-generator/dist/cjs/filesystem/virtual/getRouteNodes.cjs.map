{"version":3,"file":"getRouteNodes.cjs","sources":["../../../../src/filesystem/virtual/getRouteNodes.ts"],"sourcesContent":["import { join, resolve } from 'node:path'\nimport {\n  removeExt,\n  removeLeadingSlash,\n  removeTrailingSlash,\n  routePathToVariable,\n} from '../../utils'\nimport { getRouteNodes as getRouteNodesPhysical } from '../physical/getRouteNodes'\nimport type { VirtualRouteNode } from '@tanstack/virtual-file-routes'\nimport type { GetRouteNodesResult, RouteNode } from '../../types'\nimport type { Config } from '../../config'\n\nfunction ensureLeadingUnderScore(id: string) {\n  if (id.startsWith('_')) {\n    return id\n  }\n  return `_${id}`\n}\n\nfunction flattenTree(node: RouteNode): Array<RouteNode> {\n  const result = [node]\n\n  if (node.children) {\n    for (const child of node.children) {\n      result.push(...flattenTree(child))\n    }\n  }\n  delete node.children\n\n  return result\n}\n\nexport async function getRouteNodes(\n  tsrConfig: Config,\n): Promise<GetRouteNodesResult> {\n  const fullDir = resolve(tsrConfig.routesDirectory)\n  if (tsrConfig.virtualRouteConfig === undefined) {\n    throw new Error(`virtualRouteConfig is undefined`)\n  }\n  const children = await getRouteNodesRecursive(\n    tsrConfig,\n    fullDir,\n    tsrConfig.virtualRouteConfig.children,\n  )\n  const allNodes = flattenTree({\n    children,\n    filePath: tsrConfig.virtualRouteConfig.file,\n    fullPath: join(fullDir, tsrConfig.virtualRouteConfig.file),\n    variableName: 'rootRoute',\n    routePath: '/',\n    isRoot: true,\n  })\n\n  const rootRouteNode = allNodes[0]\n  const routeNodes = allNodes.slice(1)\n\n  return { rootRouteNode, routeNodes }\n}\n\nexport async function getRouteNodesRecursive(\n  tsrConfig: Config,\n  fullDir: string,\n  nodes?: Array<VirtualRouteNode>,\n  parent?: RouteNode,\n): Promise<Array<RouteNode>> {\n  if (nodes === undefined) {\n    return []\n  }\n  const children = await Promise.all(\n    nodes.map(async (node) => {\n      if (node.type === 'physical') {\n        const { routeNodes } = await getRouteNodesPhysical({\n          ...tsrConfig,\n          routesDirectory: resolve(fullDir, node.directory),\n        })\n        routeNodes.forEach((subtreeNode) => {\n          subtreeNode.variableName = routePathToVariable(\n            `${node.pathPrefix}/${removeExt(subtreeNode.filePath)}`,\n          )\n          subtreeNode.routePath = `${parent?.routePath ?? ''}${node.pathPrefix}${subtreeNode.routePath}`\n          subtreeNode.filePath = `${node.directory}/${subtreeNode.filePath}`\n        })\n        return routeNodes\n      }\n\n      const filePath = node.file\n      const variableName = routePathToVariable(removeExt(filePath))\n      const fullPath = join(fullDir, filePath)\n      const parentRoutePath = removeTrailingSlash(parent?.routePath ?? '/')\n      const isLayout = node.type === 'layout'\n      switch (node.type) {\n        case 'index': {\n          const routePath = `${parentRoutePath}/`\n          return {\n            filePath,\n            fullPath,\n            variableName,\n            routePath,\n            isLayout,\n          } satisfies RouteNode\n        }\n\n        case 'route':\n        case 'layout': {\n          let lastSegment: string\n          if (node.type === 'layout') {\n            if (node.id !== undefined) {\n              node.id = ensureLeadingUnderScore(node.id)\n            } else {\n              node.id = '_layout'\n            }\n            lastSegment = node.id\n          } else {\n            lastSegment = node.path\n          }\n          const routePath = `${parentRoutePath}/${removeLeadingSlash(lastSegment)}`\n\n          const routeNode: RouteNode = {\n            fullPath,\n            isLayout,\n            filePath,\n            variableName,\n            routePath,\n          }\n\n          if (node.children !== undefined) {\n            const children = await getRouteNodesRecursive(\n              tsrConfig,\n              fullDir,\n              node.children,\n              routeNode,\n            )\n            routeNode.children = children\n          }\n          return routeNode\n        }\n      }\n    }),\n  )\n  return children.flat()\n}\n"],"names":["resolve","join","getRouteNodesPhysical","routePathToVariable","removeExt","removeTrailingSlash","removeLeadingSlash","children"],"mappings":"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"}