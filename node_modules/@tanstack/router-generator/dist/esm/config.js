import path from "node:path";
import { existsSync, readFileSync } from "node:fs";
import { z } from "zod";
import { virtualRootRouteSchema } from "./filesystem/virtual/config.js";
const configSchema = z.object({
  virtualRouteConfig: virtualRootRouteSchema.optional(),
  routeFilePrefix: z.string().optional(),
  routeFileIgnorePrefix: z.string().optional().default("-"),
  routeFileIgnorePattern: z.string().optional(),
  routesDirectory: z.string().optional().default("./src/routes"),
  generatedRouteTree: z.string().optional().default("./src/routeTree.gen.ts"),
  quoteStyle: z.enum(["single", "double"]).optional().default("single"),
  semicolons: z.boolean().optional().default(false),
  disableTypes: z.boolean().optional().default(false),
  addExtensions: z.boolean().optional().default(false),
  disableLogging: z.boolean().optional().default(false),
  disableManifestGeneration: z.boolean().optional().default(false),
  apiBase: z.string().optional().default("/api"),
  routeTreeFileHeader: z.array(z.string()).optional().default([
    "/* prettier-ignore-start */",
    "/* eslint-disable */",
    "// @ts-nocheck",
    "// noinspection JSUnusedGlobalSymbols"
  ]),
  routeTreeFileFooter: z.array(z.string()).optional().default(["/* prettier-ignore-end */"]),
  autoCodeSplitting: z.boolean().optional(),
  indexToken: z.string().optional().default("index"),
  routeToken: z.string().optional().default("route"),
  experimental: z.object({
    // TODO: Remove this option in the next major release (v2).
    enableCodeSplitting: z.boolean().optional()
  }).optional()
});
function getConfig(inlineConfig = {}, configDirectory) {
  if (configDirectory === void 0) {
    configDirectory = process.cwd();
  }
  const configFilePathJson = path.resolve(configDirectory, "tsr.config.json");
  const exists = existsSync(configFilePathJson);
  let config;
  if (exists) {
    config = configSchema.parse({
      ...JSON.parse(readFileSync(configFilePathJson, "utf-8")),
      ...inlineConfig
    });
  } else {
    config = configSchema.parse(inlineConfig);
  }
  if (config.disableTypes) {
    config.generatedRouteTree = config.generatedRouteTree.replace(
      /\.(ts|tsx)$/,
      ".js"
    );
  }
  if (configDirectory) {
    if (path.isAbsolute(configDirectory)) {
      config.routesDirectory = path.resolve(
        configDirectory,
        config.routesDirectory
      );
      config.generatedRouteTree = path.resolve(
        configDirectory,
        config.generatedRouteTree
      );
    } else {
      config.routesDirectory = path.resolve(
        process.cwd(),
        configDirectory,
        config.routesDirectory
      );
      config.generatedRouteTree = path.resolve(
        process.cwd(),
        configDirectory,
        config.generatedRouteTree
      );
    }
  }
  validateConfig(config);
  return config;
}
function validateConfig(config) {
  var _a;
  if (typeof ((_a = config.experimental) == null ? void 0 : _a.enableCodeSplitting) !== "undefined") {
    const message = `
------
⚠️ ⚠️ ⚠️
ERROR: The "experimental.enableCodeSplitting" flag has been made stable and is now "autoCodeSplitting". Please update your configuration file to use "autoCodeSplitting" instead of "experimental.enableCodeSplitting".
------
`;
    console.error(message);
    throw new Error(message);
  }
  if (config.indexToken === config.routeToken) {
    throw new Error(
      `The "indexToken" and "routeToken" options must be different.`
    );
  }
  if (config.routeFileIgnorePrefix && config.routeFileIgnorePrefix.trim() === "_") {
    throw new Error(
      `The "routeFileIgnorePrefix" cannot be an underscore ("_"). This is a reserved character used to denote a pathless route. Please use a different prefix.`
    );
  }
  return config;
}
export {
  configSchema,
  getConfig
};
//# sourceMappingURL=config.js.map
